create database dbBilliardsManagement
go
use dbBilliardsManagement
go

/*-------------------- table Desk -------------------*/	

	-- drop table Desk
	create table Desk
	(
			id			bigint primary key,
			name		nvarchar(500),
			style		int,
			description	nvarchar(1000),
			fee			float,
			status		int
	)
	go
	-- drop function fcgeneralDeskId
	Create function fcgeneralDeskId()
		returns bigint
		As
		Begin
			Declare @Id bigint
			Declare @MaxId bigint
			
			Select @MaxId = MAX(id) from Desk
							
			if exists (select id from Desk)
				set @Id = @MaxId+1
			else
				set @Id = 1
			return @Id
	End
	go
	-- drop procedure spInsertDesk
	create procedure spInsertDesk
	( 
			@id				bigint,
			@name			nvarchar(500),
			@style			int,
			@description	nvarchar(1000),
			@status			int,
			@fee			float
	)
	as
	Begin
		insert into Desk(id, name, style, description, status, fee)
		values(@id, @name, @style, @description, @status, @fee)
	End
	go
	-- drop procedure spUpdateDesk
	create procedure spUpdateDesk
	(
			@id				bigint,
			@name			nvarchar(500),
			@style			int,
			@description	nvarchar(1000),
			@status			int,
			@fee			float
	)
	as
	Begin
		update Desk set 
			style = @style,
			name =@name,
			description =@description,
			status =@status,
			fee =@fee
		where id =@id
	End
	go
	--drop procedure spDeleteDesk
	create procedure spDeleteDesk
	(
			@id		bigint
	)
	as
	Begin
		delete from Desk where id=@id
	End
	go
	-- drop procedure spFindDesk
	create procedure spFindDesk
	as
	Begin
	select id, name, description,
		CASE
			WHEN style = 0 THEN N'Bida lỗ'
			ELSE N'Bida france'
		END AS style,
		CASE
			WHEN status = 0 THEN N'Đang nâng cấp'
			WHEN status = 1 THEN N'Đang sử dụng'
			ELSE N'Chưa sử dụng'
		END AS status,
		(select format(fee,'#,0')) as fee
    from Desk
	End
	go
	-- drop procedure spFindByStatusDesk
	create procedure spFindByStatusDesk
	(
			@status		int
	)
	as
	Begin
		select * from Desk where status=@status
	End
	go
	--drop procedure spUpdateStatusDesk
	create procedure spUpdateStatusDesk
	(
			@id		bigint,
			@status int
	)
	as
	Begin
		update Desk set status = @status where id=@id
	End
	go
	-- drop procedure spFindAllDesk
	create procedure spFindAllDesk
	as
	Begin
		select * from Desk
	End
	go
	-- drop procedure spFindByDeskid
	create procedure spFindByDeskid
	(
		@id				bigint
	)
	as
	Begin
		select * from Desk where id = @id;
	End
	go

/*-------------------- table Menu -------------------*/	

	-- drop table Menu
	create table Menu
	(
			id			bigint primary key,
			name		nvarchar(500),
			unit		nvarchar(500),
			price		float,
			description	nvarchar(1000)
	)
	go
	-- drop function fcgetIdMenu
	Create function fcgetIdMenu()
		returns bigint
		As
		Begin
			Declare @Id bigint
			Declare @MaxId bigint
			
			Select @MaxId = MAX(id) from Menu
							
			if exists (select id from Menu)
				set @Id = @MaxId+1
			else
				set @Id = 1
			return @Id
	End
	go
	
	-- drop procedure spInsertMenu
	create procedure spInsertMenu
	( 
			@id			bigint,
			@name		nvarchar(500),
			@unit		nvarchar(500),
			@price		float,
			@description	nvarchar(1000)
	)
	as
	Begin
		insert into Menu(id, name, unit, price, description)
		values(@id, @name, @unit, @price, @description)
	End
	go
	-- drop procedure spUpdateMenu
	create procedure spUpdateMenu
	(
			@id			bigint,
			@name		nvarchar(500),
			@unit		nvarchar(500),
			@price		float,
			@description	nvarchar(1000)
	)
	as
	Begin
		update Menu set 
			name =@name,
			unit =@unit,
			price =@price,
			description =@description
		where id =@id
	End
	go
	--drop procedure spDeleteMenu
	create procedure spDeleteMenu
	(
			@id		bigint
	)
	as
	Begin
		delete from Menu where id=@id
	End
	go
	-- drop procedure spFindViewMenu
	create procedure spFindViewMenu
	as
	Begin
		select id, name, unit, (select format(price,'#,0')) as price, description from Menu
	End

/*-------------------- table Receiption -------------------*/

	-- drop table Receiption
	create table Receiption
	(
			id			bigint primary key,
			deskid		bigint,
			deskname		nvarchar(500),
			deskfee		float,
			timebegin		datetime,
			timefinish		datetime,
			totalminute		int,
			fee		float,
			total		float,
			status		int
	)
	go
	-- drop function fcgetIdReceiption
	Create function fcgetIdReceiption()
		returns bigint
		As
		Begin
			Declare @Id bigint
			Declare @MaxId bigint
			
			Select @MaxId = MAX(id) from Receiption
							
			if exists (select id from Receiption)
				set @Id = @MaxId+1
			else
				set @Id = 1
			return @Id
	End
	go
	-- drop procedure spInsertReceiption
	create procedure spInsertReceiption
	( 
			@id			bigint,
			@deskid		bigint,
			@deskname		nvarchar(500),
			@deskfee		float,
			@timebegin		datetime,
			@status		int
	)
	as
	Begin
		insert into Receiption(id, deskid, deskname, deskfee, timebegin, status)
		values(@id, @deskid, @deskname, @deskfee, @timebegin, @status)
	End
	go
	-- drop procedure spUpdateTimebeginReceiption
	create procedure spUpdateTimebeginReceiption
	(
			@id				bigint,
			@timebegin		datetime
	)
	as
	Begin
		update Receiption set 
			timebegin = @timebegin
		where id =@id
	End
	go
	-- drop procedure spUpdateReceiptionFinish
	create procedure spUpdateReceiptionFinish
	(
			@id				bigint,
			@timefinish		datetime,
			@totalminute		int,
			@fee		float,
			@total		float,
			@status		int
	)
	as
	Begin
		update Receiption set 
			timefinish = @timefinish,
			totalminute =@totalminute,
			fee =@fee,
			total =@total,
			status =@status
		where id =@id
	End
	go
	-- drop procedure spFindReceiptionByDeskid
	create procedure spFindReceiptionByDeskid
	(
			@deskid		bigint
	)
	as
	Begin
		select id, deskid, deskname, (select format(deskfee,'#,0')) as deskfee,
		(SELECT FORMAT(timebegin,'HH:mm dd/MM/yyyy')) as timebegin,
		(SELECT FORMAT(timefinish,'HH:mm dd/MM/yyyy')) as timefinish,
		totalminute, (select format(fee,'#,0')) as fee, 
		(select format(total,'#,0')) as total, 
		CASE
			WHEN status = 0 THEN N'Đang chơi'
			ELSE N'Hoàn thành'
		END AS status 
		from Receiption where deskid = @deskid and status =0 order by id desc
	End
	go
	-- drop procedure spTransferReceiption
	create procedure spTransferReceiption
	( 
			@id			bigint,
			@deskid		bigint,
			@deskname		nvarchar(500),
			@deskfee		float,
			@timebegin		datetime
	)
	as
	Begin
		update Receiption set 
			deskid = @deskid,
			deskname =@deskname,
			deskfee =@deskfee,
			timebegin =@timebegin
		where id =@id
	End
	go


/*----------------- Bang Userlogin --------------------------*/

--drop table Userlogin
create table Userlogin
	(
		username	varchar(100) primary key,
		password	nvarchar(250),
		screenname	nvarchar(250),
		status		int
	)
Go
--insert default userlogin ('admin','123','', 1)
insert into Userlogin values('admin','a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3','', 1);
Go

--drop procedure spUpdateUserlogin
create procedure spUpdateUserlogin
(
		@username		varchar(100),
		@password		varchar(250)				
)
as
Begin
		update Userlogin set 
		username=@username,
		password=@password
		where username = @username
End
go
--drop procedure spCheckLogin
create procedure spCheckLogin
(
		@username		varchar(100),
		@password		varchar(250)
)
	as
	Begin
				select	* from Userlogin
				where	username= @username
				and		password=@password				
	End
Go

	/*-------------------- table Receiptiondetail -------------------*/	

	-- drop table Receiptiondetail
	create table Receiptiondetail
	(
			id			bigint primary key,
			receiptionid		bigint foreign key references Receiption(id),
			name			nvarchar(500),
			unit		nvarchar(500),
			price		float,
			quantum		int,
			total		float
	)
	go
	-- drop function fcgetIdReceiptiondetail
	Create function fcgetIdReceiptiondetail()
		returns bigint
		As
		Begin
			Declare @Id bigint
			Declare @MaxId bigint
			
			Select @MaxId = MAX(id) from Receiptiondetail
							
			if exists (select id from Receiptiondetail)
				set @Id = @MaxId+1
			else
				set @Id = 1
			return @Id
	End
	go
	-- drop procedure spInsertReceiptiondetail
	create procedure spInsertReceiptiondetail
	( 
			@id			bigint,
			@receiptionid		bigint,
			@name			nvarchar(100),
			@unit		nvarchar(100),
			@price		float,
			@quantum		int,
			@total		float
	)
	as
	Begin
		insert into Receiptiondetail(id, receiptionid, name, unit, price, quantum, total)
		values(@id, @receiptionid, @name, @unit, @price, @quantum, @total)
	End
	go
	-- drop procedure spUpdateReceiptiondetail
	create procedure spUpdateReceiptiondetail
	(
			@id			bigint,
			@name			nvarchar(100),
			@unit		nvarchar(100),
			@price		float,
			@quantum		int,
			@total		float
	)
	as
	Begin
		update Receiptiondetail set 
			name = @name,
			unit = @unit,
			price = @price,
			quantum = @quantum,
			total =@total
		where id =@id
	End
	go
	--drop procedure spDeleteReceiptiondetail
	create procedure spDeleteReceiptiondetail
	(
			@id		bigint
	)
	as
	Begin
		delete from Receiptiondetail where id=@id
	End
	go
	-- drop procedure spFindByReceiptionid
	create procedure spFindByReceiptionid
	(
			@receiptionid		bigint
	)
	as
	Begin
		select id, name, unit, (select format(price,'#,0')) as price, 
		quantum, (select format(total,'#,0')) as total  
		from Receiptiondetail where receiptionid = @receiptionid
	End
	go

